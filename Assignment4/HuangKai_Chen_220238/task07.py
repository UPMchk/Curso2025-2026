# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/UPMchk/Curso2025-2026/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

from rdflib import URIRef
from rdflib.namespace import RDFS

PEOPLE = "http://oeg.fi.upm.es/def/people#"

# --- 1) Reunir CANDIDATAS a clase ---
classes = set()

# a) Tipadas como rdfs:Class
classes |= {c for c in g.subjects(RDF.type, RDFS.Class)}

# b) Sujetos y objetos de rdfs:subClassOf
classes |= {s for s, _, _ in g.triples((None, RDFS.subClassOf, None))}
classes |= {o for _, _, o in g.triples((None, RDFS.subClassOf, None))}

# c) Objetos de rdf:type (clases usadas por individuos)
classes |= {o for _, _, o in g.triples((None, RDF.type, None))}

# d) QUEDARSE SOLO con URIs del vocabulario people# (descarta rdfs:Class y otros externos)
classes = [
    c for c in classes
    if isinstance(c, URIRef) and str(c).startswith(PEOPLE)
]

# --- 2) Para cada clase, devolver UNA superclase del mismo vocabulario; si no hay, None ---
result = []
for c in sorted(classes, key=lambda x: str(x)):
    supers = [sc for sc in g.objects(c, RDFS.subClassOf)
              if isinstance(sc, URIRef) and str(sc).startswith(PEOPLE)]
    sc = supers[0] if supers else None
    result.append((c, sc))


for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?c ?sc
WHERE {
  {
    ?c a rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
  }
  UNION
  {
    ?c rdfs:subClassOf ?sc .
  }
  UNION
  {
    ?x rdfs:subClassOf ?c .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
  }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
from rdflib import URIRef
from rdflib.namespace import RDFS

# 1) Cierre transitivo de subclases de ns:Person
person_classes = {ns.Person}
pend = [ns.Person]
while pend:
    cur = pend.pop()
    for subc in g.subjects(RDFS.subClassOf, cur):
        if subc not in person_classes:
            person_classes.add(subc)
            pend.append(subc)

# 2) Individuos de cualquiera de esas clases (solo URIs, sin duplicados)
_individuals = sorted({
    ind
    for cls in person_classes
    for ind in g.subjects(RDF.type, cls)
    if isinstance(ind, URIRef)
}, key=lambda x: str(x))

# variable to return  ‚Üê usa la temporal en lugar de vaciarlo
individuals = _individuals

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?ind
WHERE {
  ?ind a ?c .
  ?c rdfs:subClassOf* ns:Person .
}
"""


for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name ?type
WHERE {
  # Identificar a Rocky por su nombre literal
  ?rocky (ns:hasName|rdfs:label) "Rocky" .

  # Quienes conocen a Rocky (aceptar ns:knows o foaf:knows)
  ?x (ns:knows|foaf:knows) ?rocky .

  # Devolver nombre y tipo
  ?x (ns:hasName|rdfs:label) ?name .
  ?x a ?type .
}
"""

# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  # nombre por la propiedad esperada
  ?x ns:hasName ?name .

  # CASO A: colega directo con perro (evita autocolegaje)
  {
    ?x ns:hasColleague ?y .
    FILTER(?x != ?y)
    ?y ns:hasPet ?pet .
  }
  UNION
  # CASO B: colega de colega con perro (evita igualdades triviales)
  {
    ?x ns:hasColleague ?y .
    FILTER(?x != ?y)
    ?y ns:hasColleague ?z .
    FILTER(?x != ?z && ?y != ?z)
    ?z ns:hasPet ?pet .
  }

  # perro con clase EXACTA Dog
  ?pet a ns:Dog .
}
"""

for r in g.query(query):
    print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")